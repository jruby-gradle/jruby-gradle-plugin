//buildscript {
//    repositories {
//        jcenter()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//    dependencies {
////        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
////        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0'
////        classpath "org.ajoberstar:gradle-git:1.2.0"
//    }
//}

plugins {
    id 'com.gradle.build-scan' version '1.0'
    id 'com.jfrog.bintray' version '1.3.1' apply false
    id 'org.ysb33r.gradletest' version '1.0-beta4' apply false
    id 'nebula.provided-base' version '3.1.0' apply false
    id 'org.ajoberstar.github-pages' version '1.2.0' apply false
    id 'idea'
}


group = 'com.github.jruby-gradle'
version = '1.5.1'
defaultTasks 'check', 'assemble'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

if (!releaseBuild) {
    version = "${version}-SNAPSHOT"
}

ext {
    pluginProjects = subprojects.findAll { it.name.startsWith('jruby-') }
    docProjects = subprojects.findAll { !it.name.startsWith('jruby-') }
}


subprojects {
    repositories {
        jcenter()
    }
}

configure(docProjects) {
    apply plugin: 'org.ajoberstar.github-pages'
}

configure(pluginProjects) {
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.ysb33r.gradletest'
    apply plugin: 'nebula.provided-base'


    ext {
        spockVersion = "1.0-groovy-${GroovySystem.version.replaceAll(/\.\d+$/,'')}"
    }

    dependencies {
        compile gradleApi()
        compile localGroovy()

        testCompile "org.spockframework:spock-core:${spockVersion}", {
            exclude module : 'groovy-all'
        }

        codenarc(
            "org.codenarc:CodeNarc:0.24",
        )
    }

    codenarc {
        sourceSets = [sourceSets.main]
        configFile = file("${rootProject.projectDir}/gradle/codenarc.rules")
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat "full"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    plugins.withType(JavaPlugin) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8


        project.tasks.withType(JavaCompile) { task ->
            task.sourceCompatibility = project.sourceCompatibility
            task.targetCompatibility = project.targetCompatibility
        }

        project.tasks.withType(GroovyCompile) { task ->
            task.sourceCompatibility = project.sourceCompatibility
            task.targetCompatibility = project.targetCompatibility
        }
    }
    install.dependsOn check

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    gradleTest {
        versions '2.0','2.2','2.6','2.8','2.13','3.0','3.1'
    }

}

task release(type: Exec) {
    description 'Create and upload a release'
    dependsOn subprojects.collect { ":${it.name}:bintrayUpload" }
    dependsOn ':docs:publishGhPages'
    commandLine 'git', 'tag', "v${project.version}"
}
