plugins {
    id 'com.gradle.build-scan' version '1.16'
    id 'org.ysb33r.gradletest' version '2.0-alpha-8' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'org.ajoberstar.github-pages' version '1.2.0' apply false
}

buildScan {
    termsOfServiceUrl   = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'idea'

    group = 'com.github.jruby-gradle'
    version = '1.6.0'

    if (!releaseBuild) {
        version = "${version}-SNAPSHOT"
    }

    defaultTasks 'check', 'assemble'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    ext {
        spockVersion = "org.spockframework:spock-core:1.1-groovy-2.4"
    }

}


subprojects {

    apply plugin: 'maven'

    repositories {
        jcenter()
        maven { url rubygemsProxy }
        maven { url torqueboxProxy }
    }

    if(project.name != 'docs') {
        apply plugin: 'groovy'
        apply plugin: 'codenarc'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'org.ysb33r.gradletest'


        dependencies {
            compile localGroovy()
            compile gradleApi()
            compile 'org.ysb33r.gradle:grolifant:0.8'
            gradleTestRuntime 'org.ysb33r.gradle:grolifant:0.8'
        }

        codenarc {
            sourceSets = [sourceSets.main]
            configFile = file("${rootProject.projectDir}/gradle/codenarc.rules")
        }

        test {
            testLogging {
                showStandardStreams = true
                exceptionFormat "full"
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        gradleTest {
            versions '3.0', '3.5', '4.1', '4.7', '4.9'
            dependsOn jar
        }

        install.dependsOn check
    }


    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

task release(type: Exec) {
    description 'Create and upload a release'
    dependsOn subprojects.collect { ":${it.name}:bintrayUpload" }
    commandLine 'git', 'tag', "v${project.version}"
}
